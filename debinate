#!/usr/bin/env bash

# Copyright 2014-2016 Ray Holder
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o pipefail

readonly DEBINATE_VERSION=0.5.0
readonly PROVISIONING=.debinate
readonly DEBINATE_BUILD=${PROVISIONING}/build
readonly DEBINATE_TARGET=${PROVISIONING}/target
readonly DEBINATE_CACHE=${PROVISIONING}/cache

# install prefix defaults to /opt if unset
readonly DEBINATE_INSTALL_PREFIX="${DEBINATE_INSTALL_PREFIX:-/opt}"

# project name defaults to project directory if unset
readonly PROJECT_BASE_DIR="${PWD##*/}"
readonly PROJECT_NAME="${PROJECT_NAME:-$PROJECT_BASE_DIR}"

# version defaults to 1.0.0 if unset
readonly VERSION="${VERSION:-1.0.0}"

# Python interpreter defaults to whatever is currently python
readonly DEBINATE_PYTHON="${DEBINATE_PYTHON:-$(which python)}"

# print usage information and exit
function usage () {
        cat << EOF
Debinate ${DEBINATE_VERSION} - roll up your project into a Debian package

Python:

  debinate init     - create and initialize a Debinate project structure in ${PROVISIONING}
  debinate package  - creates a .deb file from your project in ${DEBINATE_BUILD}
  debinate build    - kitchen sink, specify all the things!
  debinate clean    - delete everything in the target, build, and cache folders

Advanced:

  debinate build - build a .deb from a directory
   -r, --root         root directory, e.g. ./root with ./root/usr/local/bin/thing inside
   -n, --name         project name (optional, default: current directory)
   -v, --version      project version (optional, default: 1.0.0)
   -d, --debian-dir   directory that contains debian package files, like control (optional)
   -o, --output       output .deb file location (optional, default: "./name-version.deb")

Examples:

  # everything you need to package up Python stuff
  debinate init
  debinate package
  debinate clean

  # minimal default to build a .deb from the given root directory
  debinate build -r ./build/root

  # kitchen sink, specify all the things!
  debinate build --root ./build/root --name potato --version 1.3.2 --debian-dir ./debian --output ./potato-123.deb

You can find the latest version and file bugs at https://github.com/rholder/debinate.

EOF
    exit 1
}

# create all post/pre hooks and a root folder
function init () {
    if [ -d "${PROVISIONING}" ]; then
        echo "Debinate files already exist in ${PROVISIONING}, unable to initialize."
        exit 1
    fi
    echo "Initializing project..."
    mkdir -p "${PROVISIONING}/root"
    mkdir -p "${DEBINATE_BUILD}"
    echo "python" > "${PROVISIONING}/depends"
    echo -e "#!/bin/bash\n\necho Debinate package installed." > "${PROVISIONING}/after_install.sh"
    echo -e "#!/bin/bash\n\necho Debinate package removed." > "${PROVISIONING}/before_remove.sh"
    echo "Done."
    exit 0
}

# create the target Python package with a virtualenv
function package_python () {
    TARGET_PROJECT_DIR="${DEBINATE_INSTALL_PREFIX}/${PROJECT_NAME}"
    TARGET_VIRTUAL_ENV="${TARGET_PROJECT_DIR}/.virtualenv"
    echo Building ${PROJECT_NAME} - ${VERSION}

    rm -rf "${DEBINATE_TARGET}"
    rm -rf "${DEBINATE_BUILD}"
    mkdir -p "${DEBINATE_BUILD}"

    echo "Clearing any virtualenv in ${TARGET_VIRTUAL_ENV}"
    rm -rf "${TARGET_VIRTUAL_ENV}"

    if [ -f "requirements.txt" ]; then
        echo "Found requirements.txt, installing dependencies in order first..."
        mkdir -p "${DEBINATE_CACHE}"
        local cache_key=($(md5sum requirements.txt))
        local cache_file="${DEBINATE_CACHE}/virtualenv-${cache_key[0]}.tar.gz"
        if [ -f "${cache_file}" ]; then
            echo "Extracting cache file to ${TARGET_PROJECT_DIR}..."
            mkdir -p "${TARGET_PROJECT_DIR}"
            ${TAR} xzf "${cache_file}" -C "${TARGET_PROJECT_DIR}"
            source "${TARGET_VIRTUAL_ENV}/bin/activate"
        else
            echo "Creating new virtualenv in ${TARGET_VIRTUAL_ENV}..."
            mkdir -p "${TARGET_VIRTUAL_ENV}"
            virtualenv --python="${DEBINATE_PYTHON}" --distribute "${TARGET_VIRTUAL_ENV}"
            source "${TARGET_VIRTUAL_ENV}/bin/activate"

            # TODO don't hardcode distribute version, add as parameter
            pip install distribute==0.7.3
            DONE_REQ=false
            until $DONE_REQ; do
                read || DONE_REQ=true
                if [ -n "$REPLY" ]; then
                    pip install $REPLY
                fi
            done <requirements.txt

            # tar up the virtualenv before installing the project
            echo "Saving virtualenv cache to ${cache_file}..."
            ${TAR} czf "${cache_file}" -C "${TARGET_PROJECT_DIR}" ".virtualenv"
        fi
    else
        echo "No requirements.txt, defaulting to pip install"
        echo "Creating new virtualenv in ${TARGET_VIRTUAL_ENV}..."
        mkdir -p "${TARGET_VIRTUAL_ENV}"
        virtualenv --python="${DEBINATE_PYTHON}" --distribute "${TARGET_VIRTUAL_ENV}"
        source "${TARGET_VIRTUAL_ENV}/bin/activate"
    fi

    pip install .
    deactivate

    mkdir -p "${DEBINATE_TARGET}${TARGET_PROJECT_DIR}"
    echo "Moving virtualenv"
    mv "${TARGET_VIRTUAL_ENV}/" "${DEBINATE_TARGET}${TARGET_PROJECT_DIR}"

    # clean up the original project dir
    echo "Cleaning up target project directory ${TARGET_PROJECT_DIR}"
    rmdir "${TARGET_PROJECT_DIR}"

    # copy over root folder mirror, anything you needed
    rsync -a "${PROVISIONING}/root/" "${DEBINATE_TARGET}"
}

# delete everything that can be rebuilt
function clean () {
    echo "Cleaning out ${DEBINATE_TARGET}"
    rm -rfv "${DEBINATE_TARGET}"
    echo "Cleaning out ${DEBINATE_BUILD}"
    rm -rfv "${DEBINATE_BUILD}"
    echo "Cleaning out ${DEBINATE_CACHE}"
    rm -rfv "${DEBINATE_CACHE}"

    echo "Done."
    exit 0
}

# check that all the required programs are available
function check_environment () {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX
        local programs=(ar gfind sort gxargs gtar gmktemp sed gmd5sum virtualenv rsync)
        for program in "${programs[@]}"; do
            check_program_exists "$program"
        done

        # alias gnu versions for OSX
        MD5SUM=gmd5sum
        FIND=gfind
        TAR=gtar
        XARGS=gxargs
        MKTEMP=gmktemp
    else
        local programs=(ar find sort xargs tar mktemp sed md5sum virtualenv rsync)
        for program in "${programs[@]}"; do
            check_program_exists "$program"
        done
        MD5SUM=md5sum
        FIND=find
        TAR=tar
        XARGS=xargs
        MKTEMP=mktemp
    fi
}

# bail out if given program doesn't exist
function check_program_exists () {
    if [ ! -x "$(which ${1})" ]; then
        echo "Environment Error: ${1} not found on the path or not executable"
        exit 1
    fi
}

# change to the target directory and recursively take the md5sum of everything
function generate_md5sums () {
    local target_dir="$1"
    pushd "${target_dir}" > /dev/null
    ${FIND} . -type f -printf '%P\0' | LC_ALL=C sort -z | ${XARGS} -r0 ${MD5SUM}
    popd > /dev/null
}

# generate control file dependency line from newline separated file
function generate_depends () {
    sed '/^\s*$/d' "$1" | ${XARGS} | sed 's/ /, /g'
}

# generate a minimal Debian control file
function generate_control () {
    local project_name=$1
    local version=$2
    local vendor=$3
    local depends=$4

    cat << EOF
Package: ${project_name}
Version: ${version}
License: unknown
Vendor: ${vendor}
Architecture: all
Maintainer: <root@localhost>
Depends: ${depends}
Section: default
Priority: extra
Homepage: http://example.com/no-uri-given
Description: no description given
EOF
}

# copy a script if it exists and set it to executable
function copy_script () {
    local source_file=$1
    local target_file=$2
    if [ -f "${source_file}" ]; then
        cp "${source_file}" "${target_file}"
        chmod +x "${target_file}"
    fi
}

# fail if the given value is empty with the given message
function fail_if_empty () {
    local the_value=$1
    local message_when_empty=$2

    if [ -z "${the_value}" ]; then
        echo "${message_when_empty}"
        exit 1
    fi
}

# add a trailing slash to the given value or leave it alone if it doesn't have one
function add_trailing_slash () {
    local the_value="$1"

    case "${the_value}" in
        */) # do nothing if already ends in /
        ;;
        *)  # add a / if it doesn't end with one
            the_value="${the_value}/"
        ;;
    esac
    echo "${the_value}"
}

# parse commandline arguments and build a Debian package archive from a directory
function build_cli () {
    # required, will fail if empty
    local deb_root=

    # optional, defaults provided
    local project_name=${PROJECT_NAME}
    local project_version="1.0.0"
    local deb_output="${project_name}-${project_version}.deb"

    # this can be empty
    local debian_dir=

    while :; do
        case $1 in
            -h|-\?|--help)   # Call a "usage" function to display a synopsis, then exit.
                usage
                exit 0
                ;;
            -r|--root)
                if [ -n "$2" ]; then
                    deb_root=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--root" requires a non-empty option argument.\n' >&2
                    exit 1
                fi
                ;;
            -n|--name)       # Takes an option argument, ensuring it has been specified.
                if [ -n "$2" ]; then
                    project_name=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--name" requires a non-empty option argument.\n' >&2
                    exit 1
                fi
                ;;
            -v|--version)
                if [ -n "$2" ]; then
                    project_version=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--version" requires a non-empty option argument.\n' >&2
                    exit 1
                fi
                ;;
            -d|--debian-dir)
                if [ -n "$2" ]; then
                    debian_dir=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--debian-dir" requires a non-empty option argument.\n' >&2
                    exit 1
                fi
                ;;
            -o|--output)
                if [ -n "$2" ]; then
                    deb_output=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--output" requires a non-empty option argument.\n' >&2
                    exit 1
                fi
                ;;
            --)              # End of all options.
                shift
                break
                ;;
            -?*)
                printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
                ;;
            *)               # Default case: If no more options then break out of the loop.
                break
        esac

        shift
    done

    fail_if_empty "${deb_root}" "--root cannot be empty"
    fail_if_empty "${project_name}" "--name cannot be empty"
    fail_if_empty "${project_version}" "--version cannot be empty"
    fail_if_empty "${deb_output}" "--output cannot be empty"

    generate_deb "${deb_root}" "${project_name}" "${project_version}" "${debian_dir}" "${deb_output}"
}

# generate a Debian package archive
function generate_deb () {
    local deb_root=$1
    local project_name=$2
    local project_version=$3
    local debian_custom_dir=$4
    local deb_output=$5

    local tmp_dir=$(${MKTEMP} -d)
    local build_dir="${tmp_dir}/build"
    local target_dir="${tmp_dir}/target"

    # control archive files are staged here
    local debian_dir="${build_dir}/debian"
    mkdir -p "${build_dir}"
    mkdir -p "${target_dir}"
    mkdir -p "${debian_dir}"

    # rsync needs a / at the end to make sure things copy over without the source dir
    deb_root=$(add_trailing_slash "${deb_root}")

    # copy over root folder mirror, anything you needed
    rsync -a "${deb_root}" "${target_dir}"

    # check for debian_custom_dir
    if [ -d "${debian_custom_dir}" ]; then
        debian_custom_dir=$(add_trailing_slash "${debian_custom_dir}")
        rsync -a "${debian_custom_dir}" "${debian_dir}"
    fi

    # create Debian control archive
    generate_md5sums "${target_dir}" > "${debian_dir}/md5sums"

    # use an existing Debian control file if it exists
    if [ ! -f "${debian_dir}/control" ]; then
        # otherwise generate one
        generate_control "${project_name}" "${project_version}" "unknown" "" > "${debian_dir}/control"
    fi

    pushd "${debian_dir}" > /dev/null
    ${TAR} czf "${build_dir}/control.tar.gz" --numeric-owner --owner=0 --group=0 * 2>/dev/null
    popd > /dev/null

    # create Debian data archive from target dir
    ${TAR} czf "${build_dir}/data.tar.gz" --numeric-owner --owner=0 --group=0 -C "${target_dir}" .

    # create Debian version file
    echo "2.0" > "${build_dir}/debian-binary"

    # create final Debian package
    ar cr "${deb_output}" "${build_dir}/debian-binary" "${build_dir}/control.tar.gz" "${build_dir}/data.tar.gz"
    echo "Debian archive ${deb_output} was generated successfully."
}

# TODO this will eventually roll into generate_deb, keeping for now to minimize backward compatible changes
# generate a Debian package archive
function generate_deb_for_python () {
    local project_name=$1
    local version=$2
    local vendor=$3
    local provision_dir=$4
    local deb_file=$5

    local depends_file="${provision_dir}/depends"
    local build_dir="${provision_dir}/build"
    local target_dir="${provision_dir}/target"

    # control archive files are staged here
    local debian_dir="${build_dir}/DEBIAN"
    mkdir -p "${debian_dir}"

    # copy these things even if they don't exist
    copy_script "${provision_dir}/before_install.sh" "${debian_dir}/preinst"
    copy_script "${provision_dir}/after_install.sh" "${debian_dir}/postinst"
    copy_script "${provision_dir}/before_remove.sh" "${debian_dir}/prerm"
    copy_script "${provision_dir}/after_remove.sh" "${debian_dir}/postrm"

    # create Debian control archive
    generate_md5sums "${target_dir}" > "${debian_dir}/md5sums"

    # use an existing Debian control file if it exists
    if [ -f "${provision_dir}/control" ]; then
        cp "${provision_dir}/control" "${debian_dir}/control"
    else
        # otherwise generate it from the minimal template
        generate_control "${project_name}" "${version}" "${vendor}" "$(generate_depends ${depends_file})" > "${debian_dir}/control"
    fi

    ${TAR} czf "${build_dir}/control.tar.gz" --numeric-owner --owner=0 --group=0 -C "${debian_dir}" --ignore-failed-read control md5sums preinst postinst prerm postrm 2>/dev/null

    # create Debian data archive from target dir
    ${TAR} czf "${build_dir}/data.tar.gz" --numeric-owner --owner=0 --group=0 -C "${target_dir}" .

    # create Debian version file
    echo "2.0" > "${build_dir}/debian-binary"

    # create final Debian package
    ar cr "${deb_file}" "${build_dir}/debian-binary" "${build_dir}/control.tar.gz" "${build_dir}/data.tar.gz"
    echo "Debian archive ${deb_file} was generated successfully."
}

# run sanity checks to validate project structure
function sanity_check_python () {
    # sanity check existence of .debinate
    if [ ! -d "${PROVISIONING}" ]; then
        echo "Could not find ${PROVISIONING} directory."
        exit 1
    fi

    # sanity check existence of .debinate/root
    if [ ! -d "${PROVISIONING}/root" ]; then
        echo "Could not find ${PROVISIONING}/root directory."
        exit 1
    fi

    # sanity check existence of .debinate/after_install.sh
    if [ ! -f "${PROVISIONING}/after_install.sh" ]; then
        echo "Could not find ${PROVISIONING}/after_install.sh."
        exit 1
    fi

    # sanity check existence of .debinate/before_remove.sh
    if [ ! -f "${PROVISIONING}/before_remove.sh" ]; then
        echo "Could not find ${PROVISIONING}/before_remove.sh."
        exit 1
    fi

    # sanity check existence of existing final .deb
    local final_project_deb="${DEBINATE_BUILD}/${PROJECT_NAME}-${VERSION}.deb"
    if [ -f "${final_project_deb}" ]; then
        echo "${final_project_deb} already exists."
        exit 1
    fi
}

function main () {
    check_environment
    case "$1" in
        init)
            init
        ;;
        clean)
            clean
        ;;
        package)
            sanity_check_python
            package_python
            generate_deb_for_python "${PROJECT_NAME}" "${VERSION}" "${VENDOR}" "${PROVISIONING}" "${DEBINATE_BUILD}/${PROJECT_NAME}-${VERSION}.deb"
        ;;
        build)
            shift 1
            build_cli "$@"
        ;;
        *)
            usage
            exit 1
        ;;
    esac
}

# skip running the main function, suitable for sourcing, testing, etc.
if [ "$1" != "--skip-main" ]; then
    main "$@"
fi
